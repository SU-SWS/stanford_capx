<?php
/**
 * @file
 */

/**
 * Implements hook_install().
 */
function stanford_capx_install() {

}

/**
 * Implements hook_enable().
 */
function stanford_capx_enable() {
  /*
   *mymodule_cache_rebuild();
   */
  /* Your code here */
}

/**
 * Implements hook_disable().
 */
function stanford_capx_disable() {
  /*
   *mymodule_cache_rebuild();
   */
  /* Your code here */
}

/**
 * Implements hook_uninstall().
 */
function stanford_capx_uninstall() {
  /*
   *variable_del('upload_file_types');
   */
}

/**
 * Implements hook_schema().
 */
function stanford_capx_schema() {
  $schema = array();

  // Profile Information Table.
  $schema['capx_profiles'] = array(
    'description' => 'CAPx Profile Information.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for this table.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The entity type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bundle_type' => array(
        'description' => 'The bundle type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'importer' => array(
        'description' => 'The importer machine name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'entity_id' => array(
        'description' => 'The entity ID.',
        'type' => 'int',
        'default' => 0,
      ),
      'profile_id' => array(
        'description' => 'The profile ID from CAP.',
        'type' => 'int',
        'default' => 0,
      ),
      'etag' => array(
        'description' => 'Etag.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sync' => array(
        'description' => 'Does this profile needs to be synced?',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 1,
        'size' => 'tiny',
      ),
      'last_sync' => array(
        'description' => 'The last time this profile was successfully updated.',
        'type' => 'int',
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'bep' => array('bundle_type', 'entity_id', 'profile_id'),
      'iep' => array('importer', 'entity_id', 'profile_id'),
    ),
  );

  // Configuration Entity
  $schema['capx_cfe'] = array(
    'description' => 'The base table for configuration entities.',
    'fields' => array(
      'cfid' => array(
        'description' => 'The primary identifier for the cfe.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type (bundle) of this cfe.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of the cfe.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'ID of Drupal user creator.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the cfe was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the cfe was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'settings' => array(
        'description' => 'The configuration settings',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'meta' => array(
        'description' => 'Meta data',
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('cfid'),
  );

  // CFE Types
  $schema['capx_cfe_type'] = array(
    'description' => 'Stores information about all defined cfe types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique task type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function stanford_capx_requirements($phase) {
  $t = get_t();
  $requirements = array();

  switch ($phase) {
    case 'install':
    case 'runtime':
      // Ensure the modules' private files directory exists and is writable.
      if (!variable_get('file_private_path', FALSE)) {

        // Display a message to the user that private files dir must be configured.
        $summary = $t('The !directory must be configured for the CAPx module to work correctly.',
          array('!directory' => l($t('private files directory'), 'admin/config/media/file-system')));

        $requirements['stanford_capx'] = array(
          'title' => $t('Stanford CAPx'),
          'severity' => REQUIREMENT_ERROR,
          'value' => $summary,
        );
      }
      break;
  }
  return $requirements;
}
