<?php
/**
 * @file
 * CAPx Tamper Module.
 */

define('CAPX_TAMPER', 'admin/config/capx/mapper');

/**
 * Implements hook_ctools_plugin_api().
 */
function capx_tamper_ctools_plugin_api($owner, $api) {
  if ($owner == 'mymodule' && $api == 'capx_tamper') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_theme().
 */
function capx_tamper_theme($existing, $type, $theme, $path) {
  return array(
    'capx_tamper_list_form' => array(
      'render element' => 'form',
      'file' => 'capx_tamper.theme.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function capx_tamper_menu() {
  $items = array();

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper'] = array(
    'title' => 'Tampers',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array('list', 4),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper/add/%'] = array(
    'title' => 'Add Tamper',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array(6, 4, 7),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper/%/edit'] = array(
    'title' => 'Tampers',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array(7, 4, 6),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper/%/delete'] = array(
    'title' => 'Tampers',
    'page callback' => 'capx_tamper_build_form',
    'page arguments' => array(7, 4, 6),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Loader for menu & pages.
 *
 * @param string $mapper_id
 *   Machine name of the Capx Mapper.
 *
 * @return \CAPx\Drupal\Entities\CFEntity
 *   CAPx Mapper.
 */
function capx_tamper_mapper_load($mapper_id) {
  $mapper = capx_cfe_load_by_machine_name($mapper_id, 'mapper');
  if (!$mapper) {
    drupal_not_found();
    drupal_exit();
  }
  return $mapper;
}

/**
 * Takes the configurations of the CAPx Mapper and gives the available sources.
 *
 * @param \CAPx\Drupal\Entities\CFEntity $mapper
 *   CAPx Mapper to collect available sources.
 *
 * @return array
 *   Associative array of keys as json paths. Values as an array of targets.
 */
function capx_tamper_get_mapper_sources($mapper) {
  $sources = array();
  foreach ($mapper->fields as $field_key => $field_settings) {
    $field_settings = array_filter($field_settings);
    if ($field_settings) {
      $path = $field_settings[key($field_settings)];
      $sources[$path][] = $field_key;
    }
  }
  foreach ($mapper->properties as $property => $path) {
    $sources[$path][] = $property;
  }
  return $sources;
}

/**
 * Implements hook_entity_delete().
 *
 * Deletes any CAPx Tamper plugins when the mapper is deleted.
 */
function capx_tamper_entity_delete($entity, $type) {
  if ($type == 'capx_cfe' && $entity->type == 'mapper') {
    /** @var \CAPx\Drupal\Entities\CFEntity $entity */
    db_delete('capx_tamper')
      ->condition('mapper', $entity->getMachineName())
      ->execute();
  }
}

/**
 * Implements hook_entity_update().
 *
 * If the source does not exist after saving the mapper, delete any CAPx Tamper
 * plugins that are attached.
 */
function capx_tamper_entity_update($entity, $type) {
  if ($type == 'capx_cfe' && $entity->type == 'mapper') {
    /** @var \CAPx\Drupal\Entities\CFEntity $entity */
    $sources = capx_tamper_get_mapper_sources($entity);
    $tampers = capx_tamper_load_tampers(array('mapper' => $entity->getMachineName()));
    foreach ($tampers as $id => $tamper) {
      if (!isset($sources[$tamper->source])) {
        capx_tamper_delete_instance($tamper);
      }
    }
  }
}

/**
 * Load a single or all capx tamper plugins.
 *
 * @param array $conditions
 *   Keyed conditions of the tampers to load.
 *   'mapper' => mapper machine name.
 *   'id' => tamper id.
 *   'source' => field name or entity property.
 *
 * @return array
 *   Single or all tampers configured.
 */
function capx_tamper_load_tampers($conditions = array()) {
  ctools_include('export');
  if ($conditions) {
    $items = ctools_export_load_object('capx_tamper', 'conditions', $conditions);
  }
  else {
    $items = ctools_export_load_object('capx_tamper');
  }

  usort($items, function ($a, $b) {
    return $a->weight - $b->weight;
  });

  return $items;
}

/**
 * Saves the tamper plugin and settings.
 *
 * @param object $tamper
 *   CAPx Tamper object.
 */
function capx_tamper_save_instance($tamper) {
  if (capx_tamper_load_tampers(array('id' => $tamper->id))) {
    drupal_write_record('capx_tamper', $tamper, 'id');
  }
  else {
    drupal_write_record('capx_tamper', $tamper);
  }
}

/**
 * Deletes the given CAPx Tamper plugin.
 *
 * @param object $tamper
 *   CAPx Tamper plugin to delete.
 */
function capx_tamper_delete_instance($tamper) {
  db_delete('capx_tamper')
    ->condition('id', $tamper->id)
    ->condition('mapper', $tamper->mapper)
    ->execute();
}

/**
 * Implements hook_capx_pre_entity_create_alter().
 *
 * Change the entries in the $values['data'] according to the tamper plugins.
 */
function capx_tamper_capx_pre_entity_create_alter(&$values) {
  /** @var \CAPx\Drupal\Mapper\EntityMapper $mapper */
  $mapper = NULL;
  $data = array();
  extract($values);
  /** @var \CAPx\Drupal\Entities\CFEntity $cfe_mapper */
  $cfe_mapper = $mapper->getMapper();


  // Sets an object to be used for particular tamper plugins.
  // @see feeds_tamper_copy_callback().
  $result = new stdClass();
  $items = array();
  foreach (capx_tamper_get_mapper_sources($cfe_mapper) as $path => $targets) {
    $item = $mapper->getRemoteDataByJsonPath($data, $path);
    if (strpos($path, '*') !== FALSE && isset($items[0][$path][$mapper->getIndex()])) {
      $items[0][$path] = $items[0][$path][$mapper->getIndex()];
    }
    if (is_array($item) && count($item)) {
      $item = reset($item);
    }
    $items[0][$path] = $item;
  }
  $result->items = $items;


  // Loop through tamper plugins on the mapper.
  foreach (capx_tamper_load_tampers(array('mapper' => $cfe_mapper->machine_name)) as $tamper) {
    $plugin = feeds_tamper_get_plugin($tamper->plugin_id);
    if (function_exists($plugin['callback'])) {
      $path = $tamper->source;
      $field = $mapper->getRemoteDataByJsonPath($data, $path);

      // Gets the index item.
      if (strpos($path, '*') !== FALSE) {
        if (isset($field[$mapper->getIndex()])) {
          $field = $field[$mapper->getIndex()];
        }
        else {
          $field = NULL;
        }
      }
      else {
        $field = reset($field);
      }

      if ($field) {

        // Call any functions that have to alter the tamper before using
        // the feeds tamper plugin directly.
        $pre_callback = 'capx_tamper_' . $plugin['callback'];
        $key = 0;
        if (function_exists($pre_callback)) {
          $pre_callback($result, $key, $path, $field, $tamper->settings, $tamper->source);
        }

        // Call the feeds tamper. Then set that value back into the data array.
        $plugin['callback']($result, $key, $path, $field, $tamper->settings, $tamper->source);
        capx_tamper_set_data_by_json_path($data, $path, $field, $mapper->getIndex());
      }
    }
  }

  $values['data'] = $data;
}

/**
 * Special handler for "Copy To" tamper.
 *
 * Switches it to a "Copy From" and flips the sources.
 *
 * @param object $result
 *   Results object with items property.
 * @param int $item_key
 *   Index of the item. Normally 0.
 * @param string $path
 *   JSON path string.
 * @param mixed $field
 *   String for most field results to manipulate.
 * @param array $settings
 *   CAPx Tamper settings.
 * @param string $source
 *   Original source.
 */
function capx_tamper_feeds_tamper_copy_callback(&$result, &$item_key, &$path, &$field, &$settings, &$source) {
  if ($settings['to_from'] == 'to') {
    $settings['to_from'] = 'from';
    $a = $path;
    $path = $settings['source'];
    $settings['source'] = $a;
  }
}

/**
 * Recursive function, given the object's data array, change a single value.
 *
 * @param array $data
 *   Object array from json response from API.
 * @param string $path
 *   JSON string path to desired value.
 * @param mixed $value
 *   New value to set.
 * @param int $index
 *   For wildcard items, change the correct indexed item.
 */
function capx_tamper_set_data_by_json_path(&$data, $path, $value, $index = 0) {
  $paths = explode('.', $path);

  // End of path.
  if (count($paths) == 1) {
    if (isset($data[$path])) {
      $data[$path] = $value;
      return;
    }
  }

  $piece = array_shift($paths);

  // Beginning of the JSON path.
  if ($piece == '$') {
    $piece = array_shift($paths);
  }

  // Wildcard, replace the piece with the index value.
  if ($piece == '*') {
    $piece = $index;
  }

  if (isset($data[$piece])) {
    capx_tamper_set_data_by_json_path($data[$piece], implode('.', $paths), $value);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function capx_tamper_form_stanford_capx_mapper_form_alter(&$form, &$form_state, $form_id) {
  $mapper_name = FALSE;

  if ($form['naming']['machine-name']['#default_value']) {
    $mapper_name = $form['naming']['machine-name']['#default_value'];
  }

  $form['tampers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tamper'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 1,
    '#tree' => TRUE,
  );

  // Move the submit buttons to the bottom.
  $form['actions']['#weight'] = 100;

  if (!$mapper_name) {
    $form['tampers']['info'] = array(
      '#markup' => t('Configure and save the mapper before configuring tampers.'),
    );
    return;
  }

  $form['tampers']['intro'] = array(
    '#markup' => "<p>" . t("Tampers allow you to manipulate items from the API before saving the data. For example, you can create a tamper that would strip html tags, or replace strings etc.") . "<p>",
  );

  $cta = "<br/><p>";
  $cta .= l(t('Manage Tampers'), CAPX_TAMPER . "/$mapper_name/tamper", array("attributes" => array("class" => 'button')));
  $cta .= "</p>";
  $cta .= "<span><em>" . t("Clicking this button will navigate you away to a new page. Please save your work first.") . "</em></span>";

  $form['tampers']['cta'] = array(
    '#markup' => $cta,
  );
}

/**
 * Creates an HTML id/class attribute name.
 *
 * @param string $path
 *   JSON path.
 *
 * @return string
 *   HTML ready id/class converted from the path.
 */
function capx_tamper_table_id($path) {
  $path = trim($path, '$.');
  return preg_replace("/[^A-Za-z0-9 ]/", '-', $path);
}