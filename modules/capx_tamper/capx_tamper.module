<?php
/**
 * @file
 * CAPx Tamper Module.
 */

define('CAPX_TAMPER', 'admin/config/capx/mapper');

/**
 * Implements hook_ctools_plugin_api().
 */
function capx_tamper_ctools_plugin_api($owner, $api) {
  if ($owner == 'mymodule' && $api == 'capx_tamper') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_menu().
 */
function capx_tamper_menu() {
  $items = array();
  $items[CAPX_TAMPER . '/%capx_tamper_mapper/tamper'] = array(
    'title' => 'Tampers',
    'page callback' => 'capx_tamper_list',
    'page arguments' => array(4),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPX_TAMPER . '/%/tamper/add/%'] = array(
    'title' => 'Add Tamper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capx_tamper_add', 4, 7),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items[CAPX_TAMPER . '/%/tamper/%/edit'] = array(
    'title' => 'Tampers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capx_tamper_edit', 4, 6),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPX_TAMPER . '/%/tamper/%/delete'] = array(
    'title' => 'Tampers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('capx_tamper_delete', 4, 6),
    'file' => 'capx_tamper.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function capx_tamper_mapper_load($mapper_id) {
  $mapper = capx_cfe_load_by_machine_name($mapper_id, 'mapper');
  if (!$mapper) {
    drupal_not_found();
    drupal_exit();
  }
  return $mapper;
}

function capx_tamper_get_mapper_sources($mapper) {
  $sources = array();
  foreach ($mapper->fields as $field_key => $field_settings) {
    $field_settings = array_filter($field_settings);
    if ($field_settings) {
      $path = $field_settings[key($field_settings)];
      $sources[$path][] = $field_key;
    }
  }
  foreach ($mapper->properties as $property => $path) {
    $sources[$path][] = $property;
  }
  return $sources;
}

/**
 * Implements hook_entity_delete().
 */
function capx_tamper_entity_delete($entity, $type) {
  if ($type == 'capx_cfe') {
    /** @var \CAPx\Drupal\Entities\CFEntity $entity */
    db_delete('capx_tamper')
      ->condition('mapper', $entity->getMachineName())
      ->execute();
  }
}

/**
 * Load a single or all capx tamper plugins.
 *
 * @param array $conditions
 *   Keyed conditions of the tampers to load.
 *   'mapper' => mapper machine name.
 *   'id' => tamper id.
 *   'source' => field name or entity property.
 *
 * @return array
 *   Single or all tampers configured.
 */
function capx_tamper_load_tampers($conditions = array()) {
  ctools_include('export');
  if ($conditions) {
    return ctools_export_load_object('capx_tamper', 'conditions', $conditions);
  }
  return ctools_export_load_object('capx_tamper');
}

/**
 * Saves the tamper plugin and settings.
 *
 * @param object $tamper
 *   CAPx Tamper object.
 */
function capx_tamper_save_instance($tamper) {
  if (capx_tamper_load_tampers(array('id' => $tamper->id))) {
    drupal_write_record('capx_tamper', $tamper, 'id');
  }
  else {
    drupal_write_record('capx_tamper', $tamper);
  }
}

/**
 * Deletes the given CAPx Tamper plugin.
 *
 * @param object $tamper
 *   CAPx Tamper plugin to delete.
 */
function capx_tamper_delete_instance($tamper) {
  db_delete('capx_tamper')
    ->condition('id', $tamper->id)
    ->execute();
}

/**
 * Implements hook_capx_pre_entity_create_alter().
 */
function capx_tamper_capx_pre_entity_create_alter(&$values) {
  /** @var \CAPx\Drupal\Mapper\EntityMapper $mapper */
  $mapper = NULL;
  $data = array();
  extract($values);
  /** @var \CAPx\Drupal\Entities\CFEntity $cfe_mapper */
  $cfe_mapper = $mapper->getMapper();

  foreach (capx_tamper_load_tampers(array('mapper' => $cfe_mapper->machine_name)) as $tamper) {
    $plugin = feeds_tamper_get_plugin($tamper->plugin_id);
    if (function_exists($plugin['callback'])) {
      $path = $tamper->source;
      $field = $mapper->getRemoteDataByJsonPath($data, $path);
      if (strpos($path, '*') !== FALSE) {
        if (isset($field[$mapper->getIndex()])) {
          $field = $field[$mapper->getIndex()];
        }
        else {
          $field = NULL;
        }
      }
      else {
        $field = reset($field);
      }

      if ($field) {
        $plugin['callback'](NULL, NULL, NULL, $field, $tamper->settings, $tamper->source);
        capx_tamper_set_data_by_json_path($data, $path, $field, $mapper->getIndex());
      }
    }
  }

  $values['data'] = $data;
}

/**
 * Given the object's data array, change a single value.
 *
 * @param array $data
 *   Object array from json response from API.
 * @param string $path
 *   JSON string path to desired value.
 * @param mixed $value
 *   New value to set.
 * @param int $index
 *   For wildcard items, change the correct indexed item.
 */
function capx_tamper_set_data_by_json_path(&$data, $path, $value, $index = 0) {
  if (!is_array($data)) {
    $data = $value;
    return;
  }

  $paths = explode('.', $path);
  $piece = array_shift($paths);

  // Beginning of the JSON path.
  if ($piece == '$') {
    $piece = array_shift($paths);
  }

  // Wildcard, replace the piece with the index value.
  if ($piece == '*') {
    $piece = $index;
  }

  capx_tamper_set_data_by_json_path($data[$piece], implode('.', $paths), $value);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function capx_tamper_form_stanford_capx_mapper_form_alter(&$form, &$form_state, $form_id) {
  $mapper_name = FALSE;

  if ($form['naming']['machine-name']['#default_value']) {
    $mapper_name = $form['naming']['machine-name']['#default_value'];
  }

  $form['tampers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tamper'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 1,
    '#tree' => TRUE,
  );

  // Move the submit buttons to the bottom.
  $form['actions']['#weight'] = 100;

  if (!$mapper_name) {
    $form['tampers']['info'] = array(
      '#markup' => t('Configure and save the mapper before configuring tampers.'),
    );
    return;
  }

  $form['tampers']['intro'] = array(
    '#markup' => "<p>" . t("Tampers allow you to manipulate items from the API before saving the data. For example, you can create a tamper that would strip html tags, or replace strings etc.") . "<p>",
  );

  $cta = "<br/><p>";
  $cta .= l(t('Manage Tampers'), CAPX_TAMPER . "/$mapper_name/tamper", array("attributes" => array("class" => 'button')));
  $cta .= "</p>";
  $cta .= "<span><em>" . t("Clicking this button will navigate you away to a new page. Please save your work first.") . "</em></span>";

  $form['tampers']['cta'] = array(
    '#markup' => $cta,
  );
}


/**
 * Implements hook_node_insert().
 */
function capx_tamper_node_insert($node) {
  // For quick deletion during development period.
  // todo: Delete after finished developing.
  node_delete($node->nid);
}
