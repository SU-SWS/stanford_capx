<?php

/**
 * @file
 * CAPx Filters module.
 */

/**
 * Implements hook_menu().
 */
function capx_filters_menu() {
  $items = array();

  $items['admin/config/capx/mapper/edit/%/filters'] = array(
    'title' => 'Filters',
    'page callback' => 'capx_filters_list',
    'file' => 'capx_filters.forms.inc',
    'page arguments' => array(5),
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/capx/mapper/edit/%/filters/add'] = array(
    'title' => 'Add New Filter',
    'page callback' => 'drupal_get_form',
    'file' => 'capx_filters.forms.inc',
    'page arguments' => array('capx_filters_edit', 5),
    'access arguments' => array('administer capx'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/capx/mapper/edit/%/filters/%/edit'] = array(
    'title' => 'Edit Filter',
    'page callback' => 'drupal_get_form',
    'file' => 'capx_filters.forms.inc',
    'page arguments' => array('capx_filters_edit', 5, 7),
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/capx/mapper/edit/%/filters/%/delete'] = array(
    'title' => 'Edit Filter',
    'page callback' => 'drupal_get_form',
    'file' => 'capx_filters.forms.inc',
    'page arguments' => array('capx_filters_delete', 5, 7),
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_capx_entity_presave_alter().
 *
 * @param EntityDrupalWrapper $entity
 *   Entity to be saved.
 * @param array $data
 * @param CAPx\Drupal\Mapper\EntityMapper $mapper
 */
function capx_filters_capx_entity_presave_alter(&$entity, $data, $mapper) {
  $config = $mapper->getConfig();
  if (isset($config['filters'])) {
    foreach ($config['filters'] as $filter) {
      $filter['value'] = strtolower($filter['value']);
      $item = $mapper->getRemoteDataByJsonPath($data, $filter['key']);
      if (is_array($item) && $item && count($item) == 1) {
        $item = reset($item);
      }
      else {
        $item = '';
      }

      // Handles TRUE/FALSE values.
      if (is_bool($item)) {
        if ($item) {
          $item = 'true';
        }
        else {
          $item = 'false';
        }
      }
      else {
        $item = "$item";
      }

      $filtered = FALSE;
      switch ($filter['comparison']) {
        case '=':
          if ($item != $filter['value']) {
            $filtered = TRUE;
          }
          break;

        case '>':
          if (((int) $item) <= ((int) $filter['value'])) {
            $filtered = TRUE;
          }
          break;

        case '<':
          if (((int) $item) >= ((int) $filter['value'])) {
            $filtered = TRUE;
          }
          break;

        case 'contains':
          if (strpos($item, $filter['value']) === FALSE) {
            $filtered = TRUE;
          }
          break;
      }

      if ($filter['exclude']) {
        if (!$filtered) {
          if (isset($mapper->settings['filters_delete']) && $mapper->settings['filters_delete']) {
            $entity->delete();
          }
          $entity->clear();
        }
      }
      else {
        if ($filtered) {
          if (isset($mapper->settings['filters_delete']) && $mapper->settings['filters_delete']) {
            $entity->delete();
          }
          $entity->clear();
        }
      }
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function capx_filters_form_stanford_capx_mapper_form_alter(&$form, &$form_state, $form_id, $m) {
  $mapper_name = FALSE;
  $filter_delete = 0;
  if ($form['naming']['machine-name']['#default_value']) {
    $mapper_name = $form['naming']['machine-name']['#default_value'];
    $mapper = $form_state['build_info']['args'][0];
    $filter_delete = $mapper->settings['filters_delete'];
  }
  $form['field-mapping']['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filters'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  if (!$mapper_name) {
    $form['field-mapping']['filters']['info'] = array(
      '#markup' => t('Configure and save the mapper before configuring filters.'),
    );
    return;
  }

  $form['field-mapping']['filters']['delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete Existing'),
    '#description' => t('If checked, existing content will be deleted if it does not pass the configured filters'),
    '#default_value' => $filter_delete,
  );
  $form['field-mapping']['filters']['info'] = array(
    '#markup' => l(t('Configure Filters'), "admin/config/capx/mapper/edit/$mapper_name/filters"),
  );

  array_unshift($form['#submit'], 'capx_filters_mapper_config_form_submit');
}

function capx_filters_mapper_config_form_submit($form, &$form_state) {
  $mapper = capx_cfe_load_by_machine_name($form_state['values']['machine-name'], 'mapper');
  $filter_settings = &drupal_static(__FUNCTION__, array(
    'filters' => array(),
    'delete' => $form_state['values']['field-mapping']['filters']['delete'],
  ));
  if (isset($mapper->settings['filters'])) {
    $filter_settings['filters'] = $mapper->settings['filters'];
  }
}

/**
 * Implements hook_entity_presave().
 */
function capx_filters_entity_presave($entity, $type) {
  $filter_settings = drupal_static('capx_filters_mapper_config_form_submit', FALSE);
  if ($type == 'capx_cfe' && array_filter($filter_settings)) {
    $entity->settings['filters'] = $filter_settings['filters'];
    $entity->settings['filters_delete'] = $filter_settings['delete'];
  }
}
