<?php

include_once "views/capx_filters.views_default_alter.inc";

/**
 * @file
 * CAPx Filters module.
 */

use \CAPx\Drupal\Entities\CFEntity;
use CAPx\Drupal\Mapper\EntityMapper;

define('CAPX_FILTERS_PAGE', 'admin/config/capx/importer');

/**
 * Implements hook_menu().
 */
function capx_filters_menu() {
  $items = array();

  $items[CAPX_FILTERS_PAGE . "/%capx_filters_importer/filters"] = array(
    'title' => 'Filters',
    'page callback' => 'capx_filters_build_form',
    'page arguments' => array('list', 4),
    'file' => 'capx_filters.forms.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items[CAPX_FILTERS_PAGE . "/%capx_filters_importer/filters/add"] = array(
    'title' => 'Add New Filter',
    'page callback' => 'capx_filters_build_form',
    'file' => 'capx_filters.forms.inc',
    'page arguments' => array('edit', 4),
    'access arguments' => array('administer capx'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items[CAPX_FILTERS_PAGE . "/%capx_filters_importer/filters/%/edit"] = array(
    'title' => 'Edit Filter',
    'page callback' => 'capx_filters_build_form',
    'file' => 'capx_filters.forms.inc',
    'page arguments' => array('edit', 4, 6),
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  $items[CAPX_FILTERS_PAGE . "/%capx_filters_importer/filters/%/delete"] = array(
    'title' => 'Edit Filter',
    'page callback' => 'capx_filters_build_form',
    'file' => 'capx_filters.forms.inc',
    'page arguments' => array('delete', 4, 6),
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * [capx_filters_importer_load description]
 * @param  [type] $importer_id [description]
 * @return [type]              [description]
 */
function capx_filters_importer_load($importer_id) {
  $importer = capx_cfe_load_by_machine_name($importer_id, 'importer');
  if (!$importer) {
    drupal_not_found();
    drupal_exit();
  }
  return $importer;
}

/**
 * Implements hook_views_data_alter().
 */
function capx_filters_views_data_alter(&$data) {
  // Filters link.
  $data['capx_cfe']['filters_link'] = array(
    'title' => t('Manage Filters link'),
    'help' => t('Manage Filters for Importer'),
    'field' => array(
      'handler' => 'views_handler_filters_link',
    ),
  );

}

/**
 * Implements hook_capx_pre_entity_create_alter().
 */
function capx_filters_capx_pre_entity_create_alter(&$values) {
  /** @var \CAPx\Drupal\Mapper\EntityMapper $mapper */
  $mapper = NULL;
  $data = array();
  extract($values);

  /** @var CFEntity $importer */
  $importer = capx_filters_importer_load($mapper->getImporter());
  if (!capx_filters_valid($data, $mapper, $importer)) {
    $values['properties']['no_create'] = TRUE;
  }
}

/**
 * Implements hook_capx_pre_update_entity_alter().
 */
function capx_filters_capx_pre_update_entity_alter(&$entity, &$data, &$mapper) {
  /** @var CFEntity $importer */
  $importer = capx_filters_importer_load($mapper->getImporter());
  if (!capx_filters_valid($data, $mapper, $importer)) {
    if (isset($importer->filters_delete) && $importer->filters_delete) {
      $entity->delete();
    }
    $entity->clear();
  }
}

/**
 * Use the data to check if the item passes all filters.
 *
 * @param array $data
 *   Data from the api.
 * @param EntityMapper $entity_mapper
 *   Entity mapper attached to importer.
 * @param CFEntity $importer
 *   Mapper used for import.
 *
 * @return bool
 *   If its valid.
 */
function capx_filters_valid($data, EntityMapper $entity_mapper, CFEntity $importer) {
  $pass = TRUE;
  if (empty($importer->filters)) {
    return $pass;
  }
  foreach ($importer->filters as $i => $filter) {
    // Already failed a filter.
    if (!$pass) {
      break;
    }

    $item = $entity_mapper->getRemoteDataByJsonPath($data, $filter['key']);
    if (strpos($filter['key'], '*') !== FALSE) {
      $index = $entity_mapper->getIndex();
      if (isset($item[$index])) {
        $item = $item[$index];
      }
    }

    if (is_array($item)) {
      if (array_filter($item)) {
        $item = reset($item);
      }
      else {
        $item = NULL;
      }
    }

    // Handles TRUE/FALSE values.
    if (is_bool($item)) {
      if ($item) {
        $item = 'true';
      }
      else {
        $item = 'false';
      }
    }

    if (!is_array($item) && $item) {
      $item = strtolower("$item");
    }

    $temp_pass = NULL;
    switch ($filter['comparison']) {

      case "bool":
        $temp_pass = strtolower($item) == strtolower($filter['value']);
        break;

      case '=':
        $temp_pass = $item == $filter['value'];
        break;

      case '!=':
        $temp_pass = $item != $filter['value'];
        break;

      case '>':
        $temp_pass = (int) $item > (int) $filter['value'];
        break;

      case '<':
        $temp_pass = (int) $item < (int) $filter['value'];
        break;

      case 'not empty':
        $temp_pass = !is_null($item);
        break;

      case 'contains':
        $temp_pass = strpos($item, $filter['value']) !== FALSE;
        break;

      case 'before':
        $item = capx_filters_parse_date($item);
        $value = capx_filters_parse_date($filter['value']);
        if ($item && $value) {
          $temp_pass = $item < $value;
        }
        break;

      case 'after':
        $item = capx_filters_parse_date($item);
        $value = capx_filters_parse_date($filter['value']);
        if ($item && $value) {
          $temp_pass = $item > $value;
        }
        break;
    }

    if (!is_null($temp_pass)) {
      if ($temp_pass) {
        $pass = !$filter['exclude'];
      }
      else {
        $pass = $filter['exclude'];
      }
    }

  }
  return $pass;
}

/**
 * Catch errors if user inputs incorrect date string.
 *
 * @param string $string
 *   Date string to parse.
 *
 * @return bool|int
 *   Timestamp if valid date string or false.
 */
function capx_filters_parse_date($string) {
  try {
    $date = new DateTime($string);
    return $date->getTimestamp();
  }
  catch (Exception $e) {
    watchdog('capx_filters', t('Unable to parse date value. %type given.', array('%type' => gettype($string))));
    return FALSE;
  }
}


/**
 * Implements hook_capx_config_fields_alter().
 */
function capx_filters_capx_config_fields_alter($mapper, &$fields) {
  $config = $mapper->getConfig();
  if (isset($config['filters'])) {
    foreach ($config['filters'] as $i => $filter) {
      $fields["capx_filter_$i"] = array($filter['key']);
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function capx_filters_entity_presave($entity, $type) {
  if ($type == 'capx_cfe' && $entity->type == 'importer') {
    global $_capx_filters_updated;
    if (!$_capx_filters_updated) {
      /* @param CFEntity $entity */
      $orig_entity = capx_cfe_load_by_machine_name($entity->machine_name, 'importer');
      if (isset($orig_entity->filters)) {
        $entity->settings['filters'] = $orig_entity->filters;
      }
      if (isset($orig_entity->filters_delete)) {
        $entity->settings['filters_delete'] = $orig_entity->filters_delete;
      }
    }
  }
}
