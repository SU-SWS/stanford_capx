<?php
/**
 * @file
 * @author [author]
 */

// Make sure this is loaded.
require_once "includes/autoloader.php";
require_once "includes/vendor/autoload.php";
require_once "stanford_capx.entity.hooks.inc";
require_once "stanford_capx.forms.inc";
require_once "stanford_capx.blocks.inc";
require_once "stanford_capx.theme.inc";
require_once "stanford_capx.views.inc";


use CAPx\APILib\HTTPClient;
use CAPx\Drupal\Importer\EntityImporter;
use CAPx\Drupal\Mapper\EntityMapper;
use CAPx\Drupal\Mapper\FieldCollectionMapper;
use CAPx\Drupal\Util\CAPx;
use CAPx\Drupal\Util\CAPxMapper;
use CAPx\Drupal\Util\CAPxImporter;
use CAPx\Drupal\Util\CAPxConnection;
use CAPx\Drupal\Organizations\Orgs;

// No mapping into these entity types.
global $CAP_RESTRICTED_ENTITY_TYPES;
$CAP_RESTRICTED_ENTITY_TYPES = array(
  'capx_cfe',
  'capx_cfe_type',
  'file',
  'comment',
  'taxonomy_vocabulary',
  'field_collection_item',
);

global $CAP_RESTRICTED_FIELD_PROPERTIES;
$CAP_RESTRICTED_FIELD_PROPERTIES = array(
  'format',
  'attributes',
);

define('STANFORD_CAPX_FILE_PATH', 'private://stanford_capx/');
define('STANFORD_CAPX_SCHEMA_FILE', 'schema.json');

/**
 * Implements hook_help().
 */
function stanford_capx_help($path, $arg) {
  switch ($path) {
    case 'admin/capx':
      return '<p>' . t('Contact %email', array('%email' => l('email', 'mailto:no-reply@stanford.edu'))) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function stanford_capx_permission() {
  return array(
    'administer capx' =>  array(
      'title' => t('Administer CAPx'),
      'description' => t('Administer and Configure CAPx settings.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function stanford_capx_node_access($node, $op, $account) {

  // Returning nothing from this function would have the same effect.
  return NODE_ACCESS_IGNORE;
}

/**
 * [stanford_capx_views_api description]
 * @return [type] [description]
 */
function stanford_capx_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu().
 */
function stanford_capx_menu() {

  // Overview page
  $items['admin/config/capx'] = array(
    'title' => 'CAPx',
    'page callback' => 'stanford_capx_admin_config',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Connect page
  $items['admin/config/capx/connect'] = array(
    'title' => 'CAPx | Connect',
    'page callback' => 'stanford_capx_admin_config_connect',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -10,
  );

  // Settings Page
  $items['admin/config/capx/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'stanford_capx_admin_config_settings',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -9,
  );

  // Sync organizations callback
  $items['admin/config/capx/organizations/sync'] = array(
    'title' => 'Organizations Sync',
    'page callback' => 'stanford_capx_organizations_sync',
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  // Help Page
  $items['admin/config/capx/help'] = array(
    'title' => 'Help',
    'page callback' => 'stanford_capx_admin_config_help',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );

  // Data Browser
  $items['admin/config/capx/data-browser'] = array(
    'title' => 'Data Browser',
    'page callback' => 'stanford_capx_admin_config_data_browser',
    'file' => 'stanford_capx.docs.inc',
    'access arguments' => array('administer capx'),
    'type' => MENU_SUGGESTED_ITEM,
    'weight' => 10,
  );


  // Mapper pages
  // ---------------------------------------------------------------------------

  $items['admin/config/capx/mapper'] = array(
    'title' => 'Mapping',
    'page callback' => 'stanford_capx_admin_config_mapper',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -5,
  );

  $items['admin/config/capx/mapper/new'] = array(
    'title' => 'Create new mapper',
    'page callback' => 'stanford_capx_admin_config_mapper_new',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/capx/mapper/edit/%'] = array(
    'title' => 'Edit mapper',
    'page callback' => 'stanford_capx_admin_config_mapper_edit',
    'page arguments' => array(5),
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/capx/mapper/delete/%'] = array(
    'title' => 'Delete Mapper',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_capx_admin_config_mapper_delete', 5),
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Importer pages
  // ---------------------------------------------------------------------------

  $items['admin/config/capx/importer'] = array(
    'title' => 'Import',
    'page callback' => 'stanford_capx_admin_config_import',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -4,
  );

  $items['admin/config/capx/importer/new'] = array(
    'title' => 'Create new importer',
    'page callback' => 'stanford_capx_admin_config_import_new',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/capx/importer/edit/%'] = array(
    'title' => 'Edit importer',
    'page arguments' => array(5),
    'page callback' => 'stanford_capx_admin_config_import_edit',
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/capx/importer/delete/%'] = array(
    'title' => 'Delete Importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stanford_capx_admin_config_importer_delete', 5),
    'access arguments' => array('administer capx'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Profile pages
  // ---------------------------------------------------------------------------

  // In views now...

  // MISC
  // ---------------------------------------------------------------------------

  $items['admin/config/capx/autocomplete/%'] = array(
    'title' => 'Autocomplete Callback Endpoint',
    'page callback' => 'stanford_capx_autocomplete',
    'page arguments' => array(4),
    'access arguments' => array('administer capx'),
    'type' => MENU_CALLBACK,
  );

  // DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG
  $items['admin/config/capx/debug'] = array(
    'title' => 'DEBUG CAPx',
    'page callback' => 'stanford_capx_debug',
    'access arguments' => array('administer capx'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  // DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG

  return $items;
}

// Cron
// /////////////////////////////////////////////////////////////////////////////


/**
 * Implements hook_cron().
 */
function stanford_capx_cron() {

  // Run all importers.
  $importers = CAPxImporter::loadAllImporters();
  foreach ($importers as $key => $importer) {
    $entity_importer = $importer->getEntityImporter();
    $entity_importer->execute();
  }

}


// Pages
// /////////////////////////////////////////////////////////////////////////////


/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config() {
   // Connection Status Block
  $connection_block = module_invoke('stanford_capx', 'block_view', 'connection_status');

  // Content Output
  $output = "";
  $output .= render($connection_block['content']);
  $output .= "<h2>" . t('Importers') . "</h2>";
  $output .= views_embed_view('importers_overview_page');

  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_connect() {

  // Connection Status Block
  $connection_block = module_invoke('stanford_capx', 'block_view', 'connection_status');

  // Content Output
  $output = "";
  $output .= render($connection_block['content']);

  // The settings form found in stanford_capx.forms.inc
  $form = drupal_get_form('stanford_capx_forms_connect_form');
  $output .= drupal_render($form);

  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_settings() {
  $output = "";

  $has_orgs = \CAPx\Drupal\Organizations\Orgs::checkOrgs();
  if (!$has_orgs) {
    drupal_set_message('The organization codes are not available. You should sync with the API now.', 'warning');
  }

  $output .= "<h2>" . t("Organizations") . "</h2>";
  $output .= "<p>" . t("Sync organization data with CAP API: ") . l('Sync Now', 'admin/config/capx/organizations/sync', array('class' => array('btn button'), 'query' => array('destination' => current_path()))) . "</p>";

  return $output;
}

/**
 * Callback url and utility function for running the organizations sync
 * @return redirects back to page user was on.
 */
function stanford_capx_organizations_sync() {
  drupal_set_message("Organization codes have been updated.", 'status');
  watchdog('stanford_capx', 'Organization codes updated', array(), WATCHDOG_INFO);
  \CAPx\Drupal\Organizations\Orgs::syncOrganizations(TRUE);
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_help() {
  $output = "";
  $output .= "<p>Please create the functionality for this page</p>";
  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_mapper() {
  $output = "";
  $output .= "<p>" . l('Create new mapper', 'admin/config/capx/mapper/new', array('attributes'=>array('class'=>'new-button btn'))) . "</p>";
  $output .= views_embed_view('capx_mappers');
  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_mapper_new() {
  $output = "";

  // Add some css.
  drupal_add_css(drupal_get_path('module', 'stanford_capx') . "/css/stanford_capx.admin.css");

  // Data browser block.
  $block = block_load('stanford_capx', 'data_browser_launch');
  $block_render = _block_get_renderable_array(_block_render_blocks(array($block)));
  $output .= render($block_render);

  // Get and render the mapper form.
  $form = drupal_get_form('stanford_capx_mapper_form');
  $output .= drupal_render($form);

  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_mapper_edit($mapper_machine_name) {
  $output = "";
  global $mapper;
  $mapper = capx_cfe_load_by_machine_name($mapper_machine_name, 'mapper');

  if (!$mapper) {
    throw new Exception("Could not load a mapper with provided machine name. Please check url.");
  }

  // Add some css.
  drupal_add_css(drupal_get_path('module', 'stanford_capx') . "/css/stanford_capx.admin.css");

  // Data browser block.
  $block = block_load('stanford_capx', 'data_browser_launch');
  $block_render = _block_get_renderable_array(_block_render_blocks(array($block)));
  $output .= render($block_render);

  // Render form
  $form = drupal_get_form('stanford_capx_mapper_form');
  $output .= drupal_render($form);

  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_import() {
  $output = "";

  $output .= "<p>" . l('Create new importer', 'admin/config/capx/importer/new', array('attributes'=>array('class'=>'new-button btn'))) . "</p>";
  $output .= views_embed_view('capx_importers');

  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_import_new() {
  $output = "";

   // Get and render the mapper form.
  $form = drupal_get_form('stanford_capx_importer_form');
  $output .= drupal_render($form);

  return $output;
}

/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */
function stanford_capx_admin_config_import_edit($importer_machine_name) {
  $output = "";
  global $importer;
  $importer = CAPxImporter::loadImporter($importer_machine_name);

  if (!$importer) {
    throw new Exception("Could not load an importer with provided machine name. Please check url.");
  }

  // Render form
  $form = drupal_get_form('stanford_capx_importer_form');
  $output .= drupal_render($form);

  return $output;
}

/**
 * Autocomplete callback endpoint for
 * @param  [type] $type [description]
 * @return [type]       [description]
 */
function stanford_capx_autocomplete($type, $string) {
  $matches = array();

  switch ($type) {
    case "orgs":
      $matches += stanford_capx_autocomplete_orgs($string);
    break;
  }

  return drupal_json_output($matches);
}

/**
 * Matches function for organization lookup.
 * @param  [type] $string [description]
 * @return [type]         [description]
 */
function stanford_capx_autocomplete_orgs($string) {
  $matches = array();
  $items = array_map('trim', explode(',', $string));
  $last_item = array_pop($items);
  $prefix = implode(', ', $items);

  // Two ways to look up an org. By org code or by name

  // Look for the exact code match
  $byname = taxonomy_get_term_by_name($last_item);
  if (!empty($byname)) {
    $option = array_pop($byname);
    $value = !empty($prefix) ? $prefix . ', ' . $option->name : $option->name;
    $matches[$value] = '[' . $option->name . '] ' . t(ucwords($option->description));
  }

  // If we have an exact match lets not go any further.
  if ($matches) {
    return $matches;
  }

  $vocab = Orgs::getVocabulary();

  // Partial code lookup. eg: AAH for AAHH
  // Partial name lookup. eg: Busi for Business and Operations
  $or = db_or()
    ->condition('name', db_like($last_item) . '%', 'LIKE')
    ->condition('description', db_like($last_item) . '%', 'LIKE');

  $query = db_select('taxonomy_term_data', 'ttd')
    ->fields('ttd', array('tid', 'name', 'description'))
    ->condition($or)
    ->execute()
    ->fetchAll();

  foreach ($query as $option) {
    $value = !empty($prefix) ? $prefix . ', ' . $option->name : $option->name;
    $matches[$value] = '[' . $option->name . '] ' . t(ucwords($option->description));
  }

  return $matches;
}


/**
 * [stanford_capx_admin_config description]
 * @return [type] [description]
 */

function stanford_capx_debug() {
  $output = "";

  $importers = CAPxImporter::loadAllImporters();
  foreach ($importers as $key => $importer) {
    $entity_importer = $importer->getEntityImporter();
    $entity_importer->execute();
  }

 // \CAPx\Drupal\Organizations\Orgs::syncOrganizations();

  return $output;
}

/**
 * [stanford_capx_schema_load]
 * @param [type] [description]
 * @param [type] [description]
 *
 * @return [type] [description]
 */
function stanford_capx_schema_load($format = 'json', $reset = FALSE) {
  // If the directory doesn't exist, the file won't either.
  if (!stanford_capx_files_dir_exists()) {
    return FALSE;
  }

  $file = STANFORD_CAPX_FILE_PATH . STANFORD_CAPX_SCHEMA_FILE;

  // @TODO: Refresh automatically under some condition? Weekly?
  // If forcing a refesh or the schema hasn't been downloaded, download it!
  if ($reset || !file_exists($file)) {
    $file_contents = stanford_capx_schema_refresh();
  }
  else {
    $file_contents = file_get_contents($file);
  }

  if (empty($file_contents)) {
    return FALSE;
  }

  if ($format === 'object') {
    $file_contents = json_decode($file_contents);
  }
  elseif ($format === 'array') {
    $file_contents = json_decode($file_contents, TRUE);
  }
  return $file_contents;
}

/**
 * [stanford_capx_schema_refresh]
 *
 * @return [type] [description]
 */
function stanford_capx_schema_refresh() {
  $file = STANFORD_CAPX_FILE_PATH . STANFORD_CAPX_SCHEMA_FILE;

  // Ensure the modules' private files directory exists and is writable.
  if (stanford_capx_files_dir_exists()) {

    // Query the API for the profile schema as raw JSON.
    $client = CAPxConnection::getAuthenticatedHTTPClient();
    $response = $client->api('schema')->getRaw('profile');
    $schema = $response->getBody(TRUE);

    // Cache the result in a private file.
    if ($schema && !empty($schema)) {
      file_unmanaged_save_data($schema, $file, FILE_EXISTS_REPLACE);
    }

    return $schema;
  }
  return FALSE;
}

/**
 * [stanford_capx_files_dir_exists]
 *
 * @return [type] [description]
 */
function stanford_capx_files_dir_exists() {
  $dir = STANFORD_CAPX_FILE_PATH;

  // Ensure the modules' private files directory exists and is writable.
  if (variable_get('file_private_path', FALSE) && file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    return TRUE;
  }

  // Display an error to the user.
  $summary = t('The !directory must be configured for the CAPx module to work correctly.',
    array('!directory' => l(t('private files directory'), 'admin/config/media/file-system')));
  drupal_set_message($summary, 'error');

  return FALSE;
}
